2023-11-13 14:33:32,415:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-13 14:33:32,415:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-13 14:33:32,415:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-13 14:33:32,415:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-13 14:38:41,636:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:38:42,067:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:38:44,882:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:38:45,222:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:38:47,507:INFO:PyCaret ClassificationExperiment
2023-11-13 14:38:47,507:INFO:Logging name: clf-default-name
2023-11-13 14:38:47,507:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-11-13 14:38:47,507:INFO:version 3.2.0
2023-11-13 14:38:47,507:INFO:Initializing setup()
2023-11-13 14:38:47,507:INFO:self.USI: 952d
2023-11-13 14:38:47,507:INFO:self._variable_keys: {'X', 'is_multiclass', 'idx', 'memory', 'fix_imbalance', 'gpu_n_jobs_param', '_ml_usecase', 'exp_id', 'log_plots_param', 'n_jobs_param', '_available_plots', 'logging_param', 'seed', 'gpu_param', 'fold_groups_param', 'USI', 'target_param', 'X_test', 'pipeline', 'data', 'y', 'fold_shuffle_param', 'y_test', 'fold_generator', 'X_train', 'y_train', 'exp_name_log', 'html_param'}
2023-11-13 14:38:47,507:INFO:Checking environment
2023-11-13 14:38:47,507:INFO:python_version: 3.11.5
2023-11-13 14:38:47,507:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2023-11-13 14:38:47,507:INFO:machine: AMD64
2023-11-13 14:38:47,507:INFO:platform: Windows-10-10.0.22621-SP0
2023-11-13 14:38:47,507:INFO:Memory: svmem(total=16718413824, available=5967876096, percent=64.3, used=10750537728, free=5967876096)
2023-11-13 14:38:47,507:INFO:Physical Core: 12
2023-11-13 14:38:47,507:INFO:Logical Core: 16
2023-11-13 14:38:47,508:INFO:Checking libraries
2023-11-13 14:38:47,508:INFO:System:
2023-11-13 14:38:47,508:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2023-11-13 14:38:47,508:INFO:executable: c:\Users\parkg\anaconda3\python.exe
2023-11-13 14:38:47,508:INFO:   machine: Windows-10-10.0.22621-SP0
2023-11-13 14:38:47,508:INFO:PyCaret required dependencies:
2023-11-13 14:38:50,496:INFO:                 pip: 23.2.1
2023-11-13 14:38:50,496:INFO:          setuptools: 68.0.0
2023-11-13 14:38:50,496:INFO:             pycaret: 3.2.0
2023-11-13 14:38:50,496:INFO:             IPython: 8.15.0
2023-11-13 14:38:50,496:INFO:          ipywidgets: 8.0.4
2023-11-13 14:38:50,496:INFO:                tqdm: 4.65.0
2023-11-13 14:38:50,496:INFO:               numpy: 1.24.3
2023-11-13 14:38:50,496:INFO:              pandas: 1.5.3
2023-11-13 14:38:50,496:INFO:              jinja2: 3.1.2
2023-11-13 14:38:50,496:INFO:               scipy: 1.10.1
2023-11-13 14:38:50,496:INFO:              joblib: 1.2.0
2023-11-13 14:38:50,496:INFO:             sklearn: 1.2.2
2023-11-13 14:38:50,497:INFO:                pyod: 1.1.1
2023-11-13 14:38:50,497:INFO:            imblearn: 0.10.1
2023-11-13 14:38:50,497:INFO:   category_encoders: 2.6.3
2023-11-13 14:38:50,497:INFO:            lightgbm: 4.1.0
2023-11-13 14:38:50,497:INFO:               numba: 0.57.1
2023-11-13 14:38:50,497:INFO:            requests: 2.31.0
2023-11-13 14:38:50,497:INFO:          matplotlib: 3.6.0
2023-11-13 14:38:50,497:INFO:          scikitplot: 0.3.7
2023-11-13 14:38:50,497:INFO:         yellowbrick: 1.5
2023-11-13 14:38:50,497:INFO:              plotly: 5.9.0
2023-11-13 14:38:50,497:INFO:    plotly-resampler: Not installed
2023-11-13 14:38:50,497:INFO:             kaleido: 0.2.1
2023-11-13 14:38:50,497:INFO:           schemdraw: 0.15
2023-11-13 14:38:50,498:INFO:         statsmodels: 0.14.0
2023-11-13 14:38:50,498:INFO:              sktime: 0.21.1
2023-11-13 14:38:50,498:INFO:               tbats: 1.1.3
2023-11-13 14:38:50,498:INFO:            pmdarima: 2.0.4
2023-11-13 14:38:50,498:INFO:              psutil: 5.9.0
2023-11-13 14:38:50,498:INFO:          markupsafe: 2.1.1
2023-11-13 14:38:50,498:INFO:             pickle5: Not installed
2023-11-13 14:38:50,498:INFO:         cloudpickle: 2.2.1
2023-11-13 14:38:50,498:INFO:         deprecation: 2.1.0
2023-11-13 14:38:50,498:INFO:              xxhash: 2.0.2
2023-11-13 14:38:50,498:INFO:           wurlitzer: Not installed
2023-11-13 14:38:50,498:INFO:PyCaret optional dependencies:
2023-11-13 14:38:50,928:INFO:                shap: Not installed
2023-11-13 14:38:50,928:INFO:           interpret: Not installed
2023-11-13 14:38:50,928:INFO:                umap: Not installed
2023-11-13 14:38:50,929:INFO:     ydata_profiling: Not installed
2023-11-13 14:38:50,929:INFO:  explainerdashboard: Not installed
2023-11-13 14:38:50,929:INFO:             autoviz: Not installed
2023-11-13 14:38:50,929:INFO:           fairlearn: Not installed
2023-11-13 14:38:50,929:INFO:          deepchecks: Not installed
2023-11-13 14:38:50,929:INFO:             xgboost: 2.0.2
2023-11-13 14:38:50,929:INFO:            catboost: Not installed
2023-11-13 14:38:50,929:INFO:              kmodes: Not installed
2023-11-13 14:38:50,929:INFO:             mlxtend: Not installed
2023-11-13 14:38:50,929:INFO:       statsforecast: Not installed
2023-11-13 14:38:50,929:INFO:        tune_sklearn: Not installed
2023-11-13 14:38:50,929:INFO:                 ray: Not installed
2023-11-13 14:38:50,929:INFO:            hyperopt: Not installed
2023-11-13 14:38:50,929:INFO:              optuna: Not installed
2023-11-13 14:38:50,929:INFO:               skopt: Not installed
2023-11-13 14:38:50,929:INFO:              mlflow: Not installed
2023-11-13 14:38:50,929:INFO:              gradio: Not installed
2023-11-13 14:38:50,929:INFO:             fastapi: Not installed
2023-11-13 14:38:50,929:INFO:             uvicorn: Not installed
2023-11-13 14:38:50,929:INFO:              m2cgen: Not installed
2023-11-13 14:38:50,929:INFO:           evidently: Not installed
2023-11-13 14:38:50,929:INFO:               fugue: Not installed
2023-11-13 14:38:50,930:INFO:           streamlit: Not installed
2023-11-13 14:38:50,930:INFO:             prophet: Not installed
2023-11-13 14:38:50,930:INFO:None
2023-11-13 14:38:50,930:INFO:Set up data.
2023-11-13 14:38:50,938:INFO:Set up folding strategy.
2023-11-13 14:38:50,939:INFO:Set up train/test split.
2023-11-13 14:38:50,950:INFO:Set up index.
2023-11-13 14:38:50,950:INFO:Assigning column types.
2023-11-13 14:38:50,955:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-11-13 14:38:51,029:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-13 14:38:51,035:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:38:51,096:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:51,102:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:51,187:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-13 14:38:51,190:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:38:51,232:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:51,236:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:51,237:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-11-13 14:38:51,310:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:38:51,351:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:51,355:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:51,419:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:38:51,461:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:51,464:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:51,464:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-11-13 14:38:51,579:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:51,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:51,690:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:51,698:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:51,702:INFO:Preparing preprocessing pipeline...
2023-11-13 14:38:51,705:INFO:Set up label encoding.
2023-11-13 14:38:51,705:INFO:Set up simple imputation.
2023-11-13 14:38:51,707:INFO:Set up column name cleaning.
2023-11-13 14:38:51,802:INFO:Finished creating preprocessing pipeline.
2023-11-13 14:38:51,812:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\parkg\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['루타', '타석', '안타', '타수', '타점', 'G',
                                             '볼넷', 'WAR*', '득점', '삼진'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              co...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-11-13 14:38:51,812:INFO:Creating final display dataframe.
2023-11-13 14:38:52,021:INFO:Setup _display_container:                     Description             Value
0                    Session id              8968
1                        Target             label
2                   Target type        Multiclass
3                Target mapping  1: 0, 2: 1, 3: 2
4           Original data shape        (1371, 11)
5        Transformed data shape        (1371, 11)
6   Transformed train set shape         (959, 11)
7    Transformed test set shape         (412, 11)
8              Numeric features                10
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              952d
2023-11-13 14:38:52,145:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:52,151:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:52,266:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:38:52,269:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:38:52,270:INFO:setup() successfully completed in 4.77s...............
2023-11-13 14:38:52,270:INFO:Initializing compare_models()
2023-11-13 14:38:52,270:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=10, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 10, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-11-13 14:38:52,270:INFO:Checking exceptions
2023-11-13 14:38:52,286:INFO:Preparing display monitor
2023-11-13 14:38:52,338:INFO:Initializing Logistic Regression
2023-11-13 14:38:52,339:INFO:Total runtime is 0.0 minutes
2023-11-13 14:38:52,343:INFO:SubProcess create_model() called ==================================
2023-11-13 14:38:52,344:INFO:Initializing create_model()
2023-11-13 14:38:52,344:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:38:52,344:INFO:Checking exceptions
2023-11-13 14:38:52,345:INFO:Importing libraries
2023-11-13 14:38:52,345:INFO:Copying training dataset
2023-11-13 14:38:52,351:INFO:Defining folds
2023-11-13 14:38:52,351:INFO:Declaring metric variables
2023-11-13 14:38:52,357:INFO:Importing untrained model
2023-11-13 14:38:52,363:INFO:Logistic Regression Imported successfully
2023-11-13 14:38:52,376:INFO:Starting cross validation
2023-11-13 14:38:52,379:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:02,082:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,109:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,113:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,117:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,850:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,864:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,873:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,875:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,875:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,878:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,879:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,891:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,896:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,900:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,900:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,903:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,904:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,908:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,909:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,911:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,933:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,937:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,952:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,957:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,958:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,963:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,967:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,968:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,972:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,976:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,976:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,977:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,978:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:02,980:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,981:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,984:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:02,986:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,003:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,008:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,013:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,022:INFO:Calculating mean and std
2023-11-13 14:39:03,025:INFO:Creating metrics dataframe
2023-11-13 14:39:03,033:INFO:Uploading results into container
2023-11-13 14:39:03,034:INFO:Uploading model into container now
2023-11-13 14:39:03,035:INFO:_master_model_container: 1
2023-11-13 14:39:03,035:INFO:_display_container: 2
2023-11-13 14:39:03,036:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8968, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-13 14:39:03,036:INFO:create_model() successfully completed......................................
2023-11-13 14:39:03,147:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:03,147:INFO:Creating metrics dataframe
2023-11-13 14:39:03,158:INFO:Initializing K Neighbors Classifier
2023-11-13 14:39:03,158:INFO:Total runtime is 0.18032835721969603 minutes
2023-11-13 14:39:03,163:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:03,163:INFO:Initializing create_model()
2023-11-13 14:39:03,163:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:03,164:INFO:Checking exceptions
2023-11-13 14:39:03,164:INFO:Importing libraries
2023-11-13 14:39:03,164:INFO:Copying training dataset
2023-11-13 14:39:03,169:INFO:Defining folds
2023-11-13 14:39:03,169:INFO:Declaring metric variables
2023-11-13 14:39:03,175:INFO:Importing untrained model
2023-11-13 14:39:03,180:INFO:K Neighbors Classifier Imported successfully
2023-11-13 14:39:03,190:INFO:Starting cross validation
2023-11-13 14:39:03,192:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:03,376:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,379:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,381:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,382:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,383:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,385:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,386:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,386:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,391:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,392:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:03,397:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,546:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,551:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,556:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,587:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,591:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,594:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,609:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,612:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,616:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,626:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,630:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,634:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,645:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,650:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,653:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,684:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,688:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,691:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:10,697:INFO:Calculating mean and std
2023-11-13 14:39:10,699:INFO:Creating metrics dataframe
2023-11-13 14:39:10,706:INFO:Uploading results into container
2023-11-13 14:39:10,708:INFO:Uploading model into container now
2023-11-13 14:39:10,709:INFO:_master_model_container: 2
2023-11-13 14:39:10,710:INFO:_display_container: 2
2023-11-13 14:39:10,710:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-11-13 14:39:10,710:INFO:create_model() successfully completed......................................
2023-11-13 14:39:10,850:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:10,851:INFO:Creating metrics dataframe
2023-11-13 14:39:10,880:INFO:Initializing Naive Bayes
2023-11-13 14:39:10,881:INFO:Total runtime is 0.30904180606206255 minutes
2023-11-13 14:39:10,891:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:10,892:INFO:Initializing create_model()
2023-11-13 14:39:10,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:10,892:INFO:Checking exceptions
2023-11-13 14:39:10,892:INFO:Importing libraries
2023-11-13 14:39:10,892:INFO:Copying training dataset
2023-11-13 14:39:10,902:INFO:Defining folds
2023-11-13 14:39:10,903:INFO:Declaring metric variables
2023-11-13 14:39:10,909:INFO:Importing untrained model
2023-11-13 14:39:10,920:INFO:Naive Bayes Imported successfully
2023-11-13 14:39:10,929:INFO:Starting cross validation
2023-11-13 14:39:10,931:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:11,022:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,022:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,026:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,027:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,028:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,032:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,033:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,033:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,035:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,039:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,042:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,045:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,050:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,054:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,056:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,058:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,059:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,060:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,062:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,063:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,067:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,071:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,074:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,075:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,076:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,077:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,078:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,079:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,082:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,086:INFO:Calculating mean and std
2023-11-13 14:39:11,087:INFO:Creating metrics dataframe
2023-11-13 14:39:11,091:INFO:Uploading results into container
2023-11-13 14:39:11,092:INFO:Uploading model into container now
2023-11-13 14:39:11,092:INFO:_master_model_container: 3
2023-11-13 14:39:11,093:INFO:_display_container: 2
2023-11-13 14:39:11,093:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-13 14:39:11,093:INFO:create_model() successfully completed......................................
2023-11-13 14:39:11,211:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:11,211:INFO:Creating metrics dataframe
2023-11-13 14:39:11,229:INFO:Initializing Decision Tree Classifier
2023-11-13 14:39:11,230:INFO:Total runtime is 0.31487020651499426 minutes
2023-11-13 14:39:11,237:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:11,238:INFO:Initializing create_model()
2023-11-13 14:39:11,238:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:11,238:INFO:Checking exceptions
2023-11-13 14:39:11,238:INFO:Importing libraries
2023-11-13 14:39:11,238:INFO:Copying training dataset
2023-11-13 14:39:11,245:INFO:Defining folds
2023-11-13 14:39:11,245:INFO:Declaring metric variables
2023-11-13 14:39:11,254:INFO:Importing untrained model
2023-11-13 14:39:11,261:INFO:Decision Tree Classifier Imported successfully
2023-11-13 14:39:11,275:INFO:Starting cross validation
2023-11-13 14:39:11,277:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:11,345:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,349:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,349:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,352:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,352:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,356:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,357:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,358:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,359:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,360:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,360:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,361:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,362:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,364:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,364:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,365:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,366:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,368:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,373:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,376:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,378:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,378:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,380:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,381:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,382:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,385:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,386:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,388:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,390:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,395:INFO:Calculating mean and std
2023-11-13 14:39:11,396:INFO:Creating metrics dataframe
2023-11-13 14:39:11,400:INFO:Uploading results into container
2023-11-13 14:39:11,400:INFO:Uploading model into container now
2023-11-13 14:39:11,401:INFO:_master_model_container: 4
2023-11-13 14:39:11,401:INFO:_display_container: 2
2023-11-13 14:39:11,401:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8968, splitter='best')
2023-11-13 14:39:11,402:INFO:create_model() successfully completed......................................
2023-11-13 14:39:11,546:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:11,546:INFO:Creating metrics dataframe
2023-11-13 14:39:11,570:INFO:Initializing SVM - Linear Kernel
2023-11-13 14:39:11,571:INFO:Total runtime is 0.32053219874699906 minutes
2023-11-13 14:39:11,579:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:11,581:INFO:Initializing create_model()
2023-11-13 14:39:11,581:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:11,581:INFO:Checking exceptions
2023-11-13 14:39:11,582:INFO:Importing libraries
2023-11-13 14:39:11,582:INFO:Copying training dataset
2023-11-13 14:39:11,591:INFO:Defining folds
2023-11-13 14:39:11,591:INFO:Declaring metric variables
2023-11-13 14:39:11,601:INFO:Importing untrained model
2023-11-13 14:39:11,607:INFO:SVM - Linear Kernel Imported successfully
2023-11-13 14:39:11,623:INFO:Starting cross validation
2023-11-13 14:39:11,625:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:11,770:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,771:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,772:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,772:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,774:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,774:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,776:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,777:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,777:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,778:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:11,779:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:11,779:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,780:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,780:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,786:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,787:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,787:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,788:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,789:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,790:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,793:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,794:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,796:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,797:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:11,799:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,799:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,799:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,801:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,803:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,804:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,805:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,806:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,809:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,810:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,812:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:11,814:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,824:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,825:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,828:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,830:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,843:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:11,845:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,847:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,850:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:11,854:INFO:Calculating mean and std
2023-11-13 14:39:11,856:INFO:Creating metrics dataframe
2023-11-13 14:39:11,861:INFO:Uploading results into container
2023-11-13 14:39:11,861:INFO:Uploading model into container now
2023-11-13 14:39:11,863:INFO:_master_model_container: 5
2023-11-13 14:39:11,863:INFO:_display_container: 2
2023-11-13 14:39:11,864:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8968, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-11-13 14:39:11,864:INFO:create_model() successfully completed......................................
2023-11-13 14:39:12,011:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:12,011:INFO:Creating metrics dataframe
2023-11-13 14:39:12,039:INFO:Initializing Ridge Classifier
2023-11-13 14:39:12,041:INFO:Total runtime is 0.32836360136667886 minutes
2023-11-13 14:39:12,051:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:12,052:INFO:Initializing create_model()
2023-11-13 14:39:12,052:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:12,053:INFO:Checking exceptions
2023-11-13 14:39:12,053:INFO:Importing libraries
2023-11-13 14:39:12,053:INFO:Copying training dataset
2023-11-13 14:39:12,067:INFO:Defining folds
2023-11-13 14:39:12,068:INFO:Declaring metric variables
2023-11-13 14:39:12,076:INFO:Importing untrained model
2023-11-13 14:39:12,086:INFO:Ridge Classifier Imported successfully
2023-11-13 14:39:12,101:INFO:Starting cross validation
2023-11-13 14:39:12,104:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:12,192:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,194:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,196:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,198:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,205:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,208:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,212:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,213:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,213:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,215:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,215:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,215:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,217:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,217:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,218:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,218:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,219:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,219:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,219:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,221:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,222:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,222:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,222:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,223:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,226:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,226:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,226:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,227:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,229:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,231:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,231:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,233:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,234:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,236:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,237:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:12,239:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,239:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,242:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,243:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,245:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:12,250:INFO:Calculating mean and std
2023-11-13 14:39:12,251:INFO:Creating metrics dataframe
2023-11-13 14:39:12,255:INFO:Uploading results into container
2023-11-13 14:39:12,256:INFO:Uploading model into container now
2023-11-13 14:39:12,258:INFO:_master_model_container: 6
2023-11-13 14:39:12,258:INFO:_display_container: 2
2023-11-13 14:39:12,259:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8968, solver='auto',
                tol=0.0001)
2023-11-13 14:39:12,259:INFO:create_model() successfully completed......................................
2023-11-13 14:39:12,421:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:12,422:INFO:Creating metrics dataframe
2023-11-13 14:39:12,448:INFO:Initializing Random Forest Classifier
2023-11-13 14:39:12,448:INFO:Total runtime is 0.3351691722869873 minutes
2023-11-13 14:39:12,456:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:12,457:INFO:Initializing create_model()
2023-11-13 14:39:12,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:12,458:INFO:Checking exceptions
2023-11-13 14:39:12,458:INFO:Importing libraries
2023-11-13 14:39:12,458:INFO:Copying training dataset
2023-11-13 14:39:12,466:INFO:Defining folds
2023-11-13 14:39:12,467:INFO:Declaring metric variables
2023-11-13 14:39:12,477:INFO:Importing untrained model
2023-11-13 14:39:12,490:INFO:Random Forest Classifier Imported successfully
2023-11-13 14:39:12,508:INFO:Starting cross validation
2023-11-13 14:39:12,511:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:13,060:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,063:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,063:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,066:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,067:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,068:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,070:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,070:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,076:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,077:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,094:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,097:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,100:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,142:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,145:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,148:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,151:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,153:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,153:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,155:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,155:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,156:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,158:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,158:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,161:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,358:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,362:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,365:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,374:INFO:Calculating mean and std
2023-11-13 14:39:13,376:INFO:Creating metrics dataframe
2023-11-13 14:39:13,383:INFO:Uploading results into container
2023-11-13 14:39:13,384:INFO:Uploading model into container now
2023-11-13 14:39:13,385:INFO:_master_model_container: 7
2023-11-13 14:39:13,385:INFO:_display_container: 2
2023-11-13 14:39:13,386:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=8968, verbose=0, warm_start=False)
2023-11-13 14:39:13,386:INFO:create_model() successfully completed......................................
2023-11-13 14:39:13,525:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:13,525:INFO:Creating metrics dataframe
2023-11-13 14:39:13,561:INFO:Initializing Quadratic Discriminant Analysis
2023-11-13 14:39:13,562:INFO:Total runtime is 0.3537244121233622 minutes
2023-11-13 14:39:13,569:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:13,570:INFO:Initializing create_model()
2023-11-13 14:39:13,570:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:13,570:INFO:Checking exceptions
2023-11-13 14:39:13,570:INFO:Importing libraries
2023-11-13 14:39:13,571:INFO:Copying training dataset
2023-11-13 14:39:13,582:INFO:Defining folds
2023-11-13 14:39:13,582:INFO:Declaring metric variables
2023-11-13 14:39:13,595:INFO:Importing untrained model
2023-11-13 14:39:13,626:INFO:Quadratic Discriminant Analysis Imported successfully
2023-11-13 14:39:13,637:INFO:Starting cross validation
2023-11-13 14:39:13,640:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:13,718:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,721:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,725:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,729:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,729:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,733:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,733:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,734:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,736:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,737:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,738:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,739:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,740:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,741:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,742:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,743:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,745:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,745:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,746:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,748:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,749:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,749:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,751:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,753:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,753:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,754:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,755:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,756:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,757:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,757:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:13,762:INFO:Calculating mean and std
2023-11-13 14:39:13,764:INFO:Creating metrics dataframe
2023-11-13 14:39:13,768:INFO:Uploading results into container
2023-11-13 14:39:13,769:INFO:Uploading model into container now
2023-11-13 14:39:13,770:INFO:_master_model_container: 8
2023-11-13 14:39:13,770:INFO:_display_container: 2
2023-11-13 14:39:13,770:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-11-13 14:39:13,770:INFO:create_model() successfully completed......................................
2023-11-13 14:39:13,877:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:13,877:INFO:Creating metrics dataframe
2023-11-13 14:39:13,903:INFO:Initializing Ada Boost Classifier
2023-11-13 14:39:13,903:INFO:Total runtime is 0.35941608746846515 minutes
2023-11-13 14:39:13,909:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:13,910:INFO:Initializing create_model()
2023-11-13 14:39:13,910:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:13,911:INFO:Checking exceptions
2023-11-13 14:39:13,911:INFO:Importing libraries
2023-11-13 14:39:13,911:INFO:Copying training dataset
2023-11-13 14:39:13,918:INFO:Defining folds
2023-11-13 14:39:13,918:INFO:Declaring metric variables
2023-11-13 14:39:13,924:INFO:Importing untrained model
2023-11-13 14:39:13,931:INFO:Ada Boost Classifier Imported successfully
2023-11-13 14:39:13,946:INFO:Starting cross validation
2023-11-13 14:39:13,948:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:14,258:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,261:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,265:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,267:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,269:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,270:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,271:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,274:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,274:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,274:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,277:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,278:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,279:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,281:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,281:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,282:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,285:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,286:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,289:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,293:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,296:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,298:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,300:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,302:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,304:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,305:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,306:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,308:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,310:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:14,314:INFO:Calculating mean and std
2023-11-13 14:39:14,315:INFO:Creating metrics dataframe
2023-11-13 14:39:14,319:INFO:Uploading results into container
2023-11-13 14:39:14,319:INFO:Uploading model into container now
2023-11-13 14:39:14,320:INFO:_master_model_container: 9
2023-11-13 14:39:14,320:INFO:_display_container: 2
2023-11-13 14:39:14,320:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=8968)
2023-11-13 14:39:14,320:INFO:create_model() successfully completed......................................
2023-11-13 14:39:14,427:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:14,428:INFO:Creating metrics dataframe
2023-11-13 14:39:14,452:INFO:Initializing Gradient Boosting Classifier
2023-11-13 14:39:14,453:INFO:Total runtime is 0.36858346859614055 minutes
2023-11-13 14:39:14,462:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:14,462:INFO:Initializing create_model()
2023-11-13 14:39:14,462:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:14,463:INFO:Checking exceptions
2023-11-13 14:39:14,463:INFO:Importing libraries
2023-11-13 14:39:14,463:INFO:Copying training dataset
2023-11-13 14:39:14,470:INFO:Defining folds
2023-11-13 14:39:14,470:INFO:Declaring metric variables
2023-11-13 14:39:14,479:INFO:Importing untrained model
2023-11-13 14:39:14,485:INFO:Gradient Boosting Classifier Imported successfully
2023-11-13 14:39:14,493:INFO:Starting cross validation
2023-11-13 14:39:14,495:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:15,903:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,906:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,909:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,932:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,935:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,937:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,955:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,956:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,957:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,959:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,960:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,961:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,976:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,978:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,979:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,980:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,981:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,981:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,984:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,984:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:15,987:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,001:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,004:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,006:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,012:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,016:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,019:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,023:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,026:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,028:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,032:INFO:Calculating mean and std
2023-11-13 14:39:16,034:INFO:Creating metrics dataframe
2023-11-13 14:39:16,037:INFO:Uploading results into container
2023-11-13 14:39:16,038:INFO:Uploading model into container now
2023-11-13 14:39:16,039:INFO:_master_model_container: 10
2023-11-13 14:39:16,039:INFO:_display_container: 2
2023-11-13 14:39:16,039:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8968, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-13 14:39:16,040:INFO:create_model() successfully completed......................................
2023-11-13 14:39:16,161:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:16,161:INFO:Creating metrics dataframe
2023-11-13 14:39:16,187:INFO:Initializing Linear Discriminant Analysis
2023-11-13 14:39:16,187:INFO:Total runtime is 0.3974721391995748 minutes
2023-11-13 14:39:16,194:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:16,194:INFO:Initializing create_model()
2023-11-13 14:39:16,194:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:16,194:INFO:Checking exceptions
2023-11-13 14:39:16,195:INFO:Importing libraries
2023-11-13 14:39:16,195:INFO:Copying training dataset
2023-11-13 14:39:16,206:INFO:Defining folds
2023-11-13 14:39:16,206:INFO:Declaring metric variables
2023-11-13 14:39:16,211:INFO:Importing untrained model
2023-11-13 14:39:16,219:INFO:Linear Discriminant Analysis Imported successfully
2023-11-13 14:39:16,239:INFO:Starting cross validation
2023-11-13 14:39:16,240:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:16,310:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,312:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,321:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,323:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,325:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,327:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,328:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,331:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,341:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,342:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,343:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,345:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,345:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,351:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,353:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,354:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,356:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,358:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,358:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,359:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,360:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,362:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,362:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,367:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,370:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,373:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,374:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,376:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,378:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:16,383:INFO:Calculating mean and std
2023-11-13 14:39:16,384:INFO:Creating metrics dataframe
2023-11-13 14:39:16,387:INFO:Uploading results into container
2023-11-13 14:39:16,388:INFO:Uploading model into container now
2023-11-13 14:39:16,388:INFO:_master_model_container: 11
2023-11-13 14:39:16,389:INFO:_display_container: 2
2023-11-13 14:39:16,389:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-11-13 14:39:16,389:INFO:create_model() successfully completed......................................
2023-11-13 14:39:16,523:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:16,523:INFO:Creating metrics dataframe
2023-11-13 14:39:16,550:INFO:Initializing Extra Trees Classifier
2023-11-13 14:39:16,550:INFO:Total runtime is 0.4035380959510803 minutes
2023-11-13 14:39:16,555:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:16,556:INFO:Initializing create_model()
2023-11-13 14:39:16,556:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:16,556:INFO:Checking exceptions
2023-11-13 14:39:16,556:INFO:Importing libraries
2023-11-13 14:39:16,557:INFO:Copying training dataset
2023-11-13 14:39:16,567:INFO:Defining folds
2023-11-13 14:39:16,600:INFO:Declaring metric variables
2023-11-13 14:39:16,612:INFO:Importing untrained model
2023-11-13 14:39:16,619:INFO:Extra Trees Classifier Imported successfully
2023-11-13 14:39:16,631:INFO:Starting cross validation
2023-11-13 14:39:16,633:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:17,095:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,096:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,097:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,098:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,099:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,101:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,101:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,101:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,102:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,103:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,104:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,104:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,106:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,106:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,107:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,129:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,132:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,135:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,154:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,157:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,159:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,159:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,162:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,166:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,181:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,183:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,185:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,194:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,197:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,199:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,203:INFO:Calculating mean and std
2023-11-13 14:39:17,204:INFO:Creating metrics dataframe
2023-11-13 14:39:17,208:INFO:Uploading results into container
2023-11-13 14:39:17,209:INFO:Uploading model into container now
2023-11-13 14:39:17,209:INFO:_master_model_container: 12
2023-11-13 14:39:17,210:INFO:_display_container: 2
2023-11-13 14:39:17,210:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8968, verbose=0, warm_start=False)
2023-11-13 14:39:17,210:INFO:create_model() successfully completed......................................
2023-11-13 14:39:17,339:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:17,339:INFO:Creating metrics dataframe
2023-11-13 14:39:17,361:INFO:Initializing Extreme Gradient Boosting
2023-11-13 14:39:17,361:INFO:Total runtime is 0.4170425057411194 minutes
2023-11-13 14:39:17,367:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:17,367:INFO:Initializing create_model()
2023-11-13 14:39:17,368:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:17,368:INFO:Checking exceptions
2023-11-13 14:39:17,368:INFO:Importing libraries
2023-11-13 14:39:17,368:INFO:Copying training dataset
2023-11-13 14:39:17,375:INFO:Defining folds
2023-11-13 14:39:17,375:INFO:Declaring metric variables
2023-11-13 14:39:17,382:INFO:Importing untrained model
2023-11-13 14:39:17,391:INFO:Extreme Gradient Boosting Imported successfully
2023-11-13 14:39:17,407:INFO:Starting cross validation
2023-11-13 14:39:17,409:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:17,940:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,943:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,944:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,945:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,946:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,948:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,949:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,951:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,952:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,953:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,955:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,956:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,957:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,959:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,965:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,968:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,969:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,969:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,971:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,973:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,977:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,979:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,980:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,981:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,982:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:17,984:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:18,011:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:18,013:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:18,015:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:18,019:INFO:Calculating mean and std
2023-11-13 14:39:18,020:INFO:Creating metrics dataframe
2023-11-13 14:39:18,024:INFO:Uploading results into container
2023-11-13 14:39:18,025:INFO:Uploading model into container now
2023-11-13 14:39:18,026:INFO:_master_model_container: 13
2023-11-13 14:39:18,026:INFO:_display_container: 2
2023-11-13 14:39:18,027:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2023-11-13 14:39:18,027:INFO:create_model() successfully completed......................................
2023-11-13 14:39:18,151:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:18,152:INFO:Creating metrics dataframe
2023-11-13 14:39:18,174:INFO:Initializing Light Gradient Boosting Machine
2023-11-13 14:39:18,175:INFO:Total runtime is 0.4306118448575338 minutes
2023-11-13 14:39:18,179:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:18,182:INFO:Initializing create_model()
2023-11-13 14:39:18,182:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:18,182:INFO:Checking exceptions
2023-11-13 14:39:18,182:INFO:Importing libraries
2023-11-13 14:39:18,182:INFO:Copying training dataset
2023-11-13 14:39:18,188:INFO:Defining folds
2023-11-13 14:39:18,188:INFO:Declaring metric variables
2023-11-13 14:39:18,193:INFO:Importing untrained model
2023-11-13 14:39:18,199:INFO:Light Gradient Boosting Machine Imported successfully
2023-11-13 14:39:18,221:INFO:Starting cross validation
2023-11-13 14:39:18,222:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:24,422:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,425:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,426:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,428:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,429:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,432:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,473:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,477:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,480:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,488:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,490:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,493:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,493:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,496:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,499:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,574:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,579:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,582:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,582:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,585:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,588:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,599:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,600:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,602:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,603:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,606:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,607:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,620:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,623:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,625:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,631:INFO:Calculating mean and std
2023-11-13 14:39:24,633:INFO:Creating metrics dataframe
2023-11-13 14:39:24,639:INFO:Uploading results into container
2023-11-13 14:39:24,640:INFO:Uploading model into container now
2023-11-13 14:39:24,641:INFO:_master_model_container: 14
2023-11-13 14:39:24,641:INFO:_display_container: 2
2023-11-13 14:39:24,642:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8968, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-11-13 14:39:24,642:INFO:create_model() successfully completed......................................
2023-11-13 14:39:24,784:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:24,785:INFO:Creating metrics dataframe
2023-11-13 14:39:24,803:INFO:Initializing Dummy Classifier
2023-11-13 14:39:24,803:INFO:Total runtime is 0.5410768469174703 minutes
2023-11-13 14:39:24,808:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:24,809:INFO:Initializing create_model()
2023-11-13 14:39:24,810:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF699F49D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:24,810:INFO:Checking exceptions
2023-11-13 14:39:24,810:INFO:Importing libraries
2023-11-13 14:39:24,810:INFO:Copying training dataset
2023-11-13 14:39:24,818:INFO:Defining folds
2023-11-13 14:39:24,819:INFO:Declaring metric variables
2023-11-13 14:39:24,825:INFO:Importing untrained model
2023-11-13 14:39:24,832:INFO:Dummy Classifier Imported successfully
2023-11-13 14:39:24,844:INFO:Starting cross validation
2023-11-13 14:39:24,846:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:24,907:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,909:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,910:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,911:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,912:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,914:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,915:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,918:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,918:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,920:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,920:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,921:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,922:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,922:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,925:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,927:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,929:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,930:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,932:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,932:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,934:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,935:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,937:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,939:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,939:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,942:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,944:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,946:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,947:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,949:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,950:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,957:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,960:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,961:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,962:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,962:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,963:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,964:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:24,965:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:24,969:INFO:Calculating mean and std
2023-11-13 14:39:24,970:INFO:Creating metrics dataframe
2023-11-13 14:39:24,975:INFO:Uploading results into container
2023-11-13 14:39:24,975:INFO:Uploading model into container now
2023-11-13 14:39:24,976:INFO:_master_model_container: 15
2023-11-13 14:39:24,976:INFO:_display_container: 2
2023-11-13 14:39:24,976:INFO:DummyClassifier(constant=None, random_state=8968, strategy='prior')
2023-11-13 14:39:24,976:INFO:create_model() successfully completed......................................
2023-11-13 14:39:25,120:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:25,121:INFO:Creating metrics dataframe
2023-11-13 14:39:25,172:INFO:Initializing create_model()
2023-11-13 14:39:25,172:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8968, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:25,172:INFO:Checking exceptions
2023-11-13 14:39:25,176:INFO:Importing libraries
2023-11-13 14:39:25,177:INFO:Copying training dataset
2023-11-13 14:39:25,188:INFO:Defining folds
2023-11-13 14:39:25,188:INFO:Declaring metric variables
2023-11-13 14:39:25,188:INFO:Importing untrained model
2023-11-13 14:39:25,188:INFO:Declaring custom model
2023-11-13 14:39:25,190:INFO:Logistic Regression Imported successfully
2023-11-13 14:39:25,192:INFO:Cross validation set to False
2023-11-13 14:39:25,192:INFO:Fitting Model
2023-11-13 14:39:25,521:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:25,523:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8968, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-13 14:39:25,523:INFO:create_model() successfully completed......................................
2023-11-13 14:39:25,654:INFO:Initializing create_model()
2023-11-13 14:39:25,655:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=8968, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:25,655:INFO:Checking exceptions
2023-11-13 14:39:25,660:INFO:Importing libraries
2023-11-13 14:39:25,661:INFO:Copying training dataset
2023-11-13 14:39:25,670:INFO:Defining folds
2023-11-13 14:39:25,670:INFO:Declaring metric variables
2023-11-13 14:39:25,671:INFO:Importing untrained model
2023-11-13 14:39:25,671:INFO:Declaring custom model
2023-11-13 14:39:25,673:INFO:Random Forest Classifier Imported successfully
2023-11-13 14:39:25,675:INFO:Cross validation set to False
2023-11-13 14:39:25,675:INFO:Fitting Model
2023-11-13 14:39:26,058:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=8968, verbose=0, warm_start=False)
2023-11-13 14:39:26,058:INFO:create_model() successfully completed......................................
2023-11-13 14:39:26,211:INFO:Initializing create_model()
2023-11-13 14:39:26,212:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:26,212:INFO:Checking exceptions
2023-11-13 14:39:26,215:INFO:Importing libraries
2023-11-13 14:39:26,216:INFO:Copying training dataset
2023-11-13 14:39:26,222:INFO:Defining folds
2023-11-13 14:39:26,223:INFO:Declaring metric variables
2023-11-13 14:39:26,223:INFO:Importing untrained model
2023-11-13 14:39:26,223:INFO:Declaring custom model
2023-11-13 14:39:26,224:INFO:Quadratic Discriminant Analysis Imported successfully
2023-11-13 14:39:26,225:INFO:Cross validation set to False
2023-11-13 14:39:26,226:INFO:Fitting Model
2023-11-13 14:39:26,259:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-11-13 14:39:26,259:INFO:create_model() successfully completed......................................
2023-11-13 14:39:26,436:INFO:Initializing create_model()
2023-11-13 14:39:26,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:26,438:INFO:Checking exceptions
2023-11-13 14:39:26,444:INFO:Importing libraries
2023-11-13 14:39:26,444:INFO:Copying training dataset
2023-11-13 14:39:26,452:INFO:Defining folds
2023-11-13 14:39:26,453:INFO:Declaring metric variables
2023-11-13 14:39:26,453:INFO:Importing untrained model
2023-11-13 14:39:26,453:INFO:Declaring custom model
2023-11-13 14:39:26,454:INFO:Linear Discriminant Analysis Imported successfully
2023-11-13 14:39:26,456:INFO:Cross validation set to False
2023-11-13 14:39:26,456:INFO:Fitting Model
2023-11-13 14:39:26,501:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-11-13 14:39:26,501:INFO:create_model() successfully completed......................................
2023-11-13 14:39:26,672:INFO:Initializing create_model()
2023-11-13 14:39:26,673:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8968, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:26,673:INFO:Checking exceptions
2023-11-13 14:39:26,679:INFO:Importing libraries
2023-11-13 14:39:26,679:INFO:Copying training dataset
2023-11-13 14:39:26,686:INFO:Defining folds
2023-11-13 14:39:26,686:INFO:Declaring metric variables
2023-11-13 14:39:26,687:INFO:Importing untrained model
2023-11-13 14:39:26,687:INFO:Declaring custom model
2023-11-13 14:39:26,688:INFO:Extra Trees Classifier Imported successfully
2023-11-13 14:39:26,691:INFO:Cross validation set to False
2023-11-13 14:39:26,691:INFO:Fitting Model
2023-11-13 14:39:26,946:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8968, verbose=0, warm_start=False)
2023-11-13 14:39:26,946:INFO:create_model() successfully completed......................................
2023-11-13 14:39:27,073:INFO:Initializing create_model()
2023-11-13 14:39:27,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8968, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:27,074:INFO:Checking exceptions
2023-11-13 14:39:27,080:INFO:Importing libraries
2023-11-13 14:39:27,080:INFO:Copying training dataset
2023-11-13 14:39:27,087:INFO:Defining folds
2023-11-13 14:39:27,087:INFO:Declaring metric variables
2023-11-13 14:39:27,087:INFO:Importing untrained model
2023-11-13 14:39:27,087:INFO:Declaring custom model
2023-11-13 14:39:27,090:INFO:Light Gradient Boosting Machine Imported successfully
2023-11-13 14:39:27,092:INFO:Cross validation set to False
2023-11-13 14:39:27,092:INFO:Fitting Model
2023-11-13 14:39:27,135:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000760 seconds.
2023-11-13 14:39:27,136:INFO:You can set `force_col_wise=true` to remove the overhead.
2023-11-13 14:39:27,136:INFO:[LightGBM] [Info] Total Bins 1632
2023-11-13 14:39:27,136:INFO:[LightGBM] [Info] Number of data points in the train set: 959, number of used features: 10
2023-11-13 14:39:27,137:INFO:[LightGBM] [Info] Start training from score -0.679682
2023-11-13 14:39:27,137:INFO:[LightGBM] [Info] Start training from score -1.414853
2023-11-13 14:39:27,137:INFO:[LightGBM] [Info] Start training from score -1.385252
2023-11-13 14:39:27,148:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2023-11-13 14:39:27,743:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8968, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-11-13 14:39:27,743:INFO:create_model() successfully completed......................................
2023-11-13 14:39:27,856:INFO:Initializing create_model()
2023-11-13 14:39:27,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8968, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:27,856:INFO:Checking exceptions
2023-11-13 14:39:27,858:INFO:Importing libraries
2023-11-13 14:39:27,859:INFO:Copying training dataset
2023-11-13 14:39:27,862:INFO:Defining folds
2023-11-13 14:39:27,862:INFO:Declaring metric variables
2023-11-13 14:39:27,863:INFO:Importing untrained model
2023-11-13 14:39:27,863:INFO:Declaring custom model
2023-11-13 14:39:27,863:INFO:Ridge Classifier Imported successfully
2023-11-13 14:39:27,864:INFO:Cross validation set to False
2023-11-13 14:39:27,864:INFO:Fitting Model
2023-11-13 14:39:27,889:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8968, solver='auto',
                tol=0.0001)
2023-11-13 14:39:27,890:INFO:create_model() successfully completed......................................
2023-11-13 14:39:28,032:INFO:Initializing create_model()
2023-11-13 14:39:28,032:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8968, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:28,034:INFO:Checking exceptions
2023-11-13 14:39:28,038:INFO:Importing libraries
2023-11-13 14:39:28,038:INFO:Copying training dataset
2023-11-13 14:39:28,054:INFO:Defining folds
2023-11-13 14:39:28,054:INFO:Declaring metric variables
2023-11-13 14:39:28,055:INFO:Importing untrained model
2023-11-13 14:39:28,055:INFO:Declaring custom model
2023-11-13 14:39:28,057:INFO:Gradient Boosting Classifier Imported successfully
2023-11-13 14:39:28,059:INFO:Cross validation set to False
2023-11-13 14:39:28,059:INFO:Fitting Model
2023-11-13 14:39:29,433:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8968, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-13 14:39:29,433:INFO:create_model() successfully completed......................................
2023-11-13 14:39:29,577:INFO:Initializing create_model()
2023-11-13 14:39:29,578:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:29,578:INFO:Checking exceptions
2023-11-13 14:39:29,582:INFO:Importing libraries
2023-11-13 14:39:29,583:INFO:Copying training dataset
2023-11-13 14:39:29,592:INFO:Defining folds
2023-11-13 14:39:29,592:INFO:Declaring metric variables
2023-11-13 14:39:29,592:INFO:Importing untrained model
2023-11-13 14:39:29,593:INFO:Declaring custom model
2023-11-13 14:39:29,593:INFO:Naive Bayes Imported successfully
2023-11-13 14:39:29,594:INFO:Cross validation set to False
2023-11-13 14:39:29,594:INFO:Fitting Model
2023-11-13 14:39:29,611:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-13 14:39:29,611:INFO:create_model() successfully completed......................................
2023-11-13 14:39:29,734:INFO:Initializing create_model()
2023-11-13 14:39:29,735:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF6A7CDB90>, estimator=AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=8968), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:29,735:INFO:Checking exceptions
2023-11-13 14:39:29,739:INFO:Importing libraries
2023-11-13 14:39:29,739:INFO:Copying training dataset
2023-11-13 14:39:29,746:INFO:Defining folds
2023-11-13 14:39:29,746:INFO:Declaring metric variables
2023-11-13 14:39:29,748:INFO:Importing untrained model
2023-11-13 14:39:29,748:INFO:Declaring custom model
2023-11-13 14:39:29,748:INFO:Ada Boost Classifier Imported successfully
2023-11-13 14:39:29,750:INFO:Cross validation set to False
2023-11-13 14:39:29,750:INFO:Fitting Model
2023-11-13 14:39:29,932:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=8968)
2023-11-13 14:39:29,932:INFO:create_model() successfully completed......................................
2023-11-13 14:39:30,120:INFO:_master_model_container: 15
2023-11-13 14:39:30,120:INFO:_display_container: 2
2023-11-13 14:39:30,124:INFO:[LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8968, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=8968, verbose=0, warm_start=False), QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8968, verbose=0, warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8968, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8968, solver='auto',
                tol=0.0001), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8968, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), GaussianNB(priors=None, var_smoothing=1e-09), AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=8968)]
2023-11-13 14:39:30,125:INFO:compare_models() successfully completed......................................
2023-11-13 14:39:31,158:INFO:PyCaret ClassificationExperiment
2023-11-13 14:39:31,158:INFO:Logging name: clf-default-name
2023-11-13 14:39:31,159:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-11-13 14:39:31,159:INFO:version 3.2.0
2023-11-13 14:39:31,159:INFO:Initializing setup()
2023-11-13 14:39:31,159:INFO:self.USI: d0c7
2023-11-13 14:39:31,159:INFO:self._variable_keys: {'X', 'is_multiclass', 'idx', 'memory', 'fix_imbalance', 'gpu_n_jobs_param', '_ml_usecase', 'exp_id', 'log_plots_param', 'n_jobs_param', '_available_plots', 'logging_param', 'seed', 'gpu_param', 'fold_groups_param', 'USI', 'target_param', 'X_test', 'pipeline', 'data', 'y', 'fold_shuffle_param', 'y_test', 'fold_generator', 'X_train', 'y_train', 'exp_name_log', 'html_param'}
2023-11-13 14:39:31,159:INFO:Checking environment
2023-11-13 14:39:31,159:INFO:python_version: 3.11.5
2023-11-13 14:39:31,159:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2023-11-13 14:39:31,159:INFO:machine: AMD64
2023-11-13 14:39:31,159:INFO:platform: Windows-10-10.0.22621-SP0
2023-11-13 14:39:31,160:INFO:Memory: svmem(total=16718413824, available=3439828992, percent=79.4, used=13278584832, free=3439828992)
2023-11-13 14:39:31,160:INFO:Physical Core: 12
2023-11-13 14:39:31,160:INFO:Logical Core: 16
2023-11-13 14:39:31,160:INFO:Checking libraries
2023-11-13 14:39:31,160:INFO:System:
2023-11-13 14:39:31,160:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2023-11-13 14:39:31,160:INFO:executable: c:\Users\parkg\anaconda3\python.exe
2023-11-13 14:39:31,160:INFO:   machine: Windows-10-10.0.22621-SP0
2023-11-13 14:39:31,161:INFO:PyCaret required dependencies:
2023-11-13 14:39:31,161:INFO:                 pip: 23.2.1
2023-11-13 14:39:31,161:INFO:          setuptools: 68.0.0
2023-11-13 14:39:31,161:INFO:             pycaret: 3.2.0
2023-11-13 14:39:31,161:INFO:             IPython: 8.15.0
2023-11-13 14:39:31,161:INFO:          ipywidgets: 8.0.4
2023-11-13 14:39:31,161:INFO:                tqdm: 4.65.0
2023-11-13 14:39:31,161:INFO:               numpy: 1.24.3
2023-11-13 14:39:31,161:INFO:              pandas: 1.5.3
2023-11-13 14:39:31,161:INFO:              jinja2: 3.1.2
2023-11-13 14:39:31,161:INFO:               scipy: 1.10.1
2023-11-13 14:39:31,161:INFO:              joblib: 1.2.0
2023-11-13 14:39:31,161:INFO:             sklearn: 1.2.2
2023-11-13 14:39:31,161:INFO:                pyod: 1.1.1
2023-11-13 14:39:31,162:INFO:            imblearn: 0.10.1
2023-11-13 14:39:31,162:INFO:   category_encoders: 2.6.3
2023-11-13 14:39:31,162:INFO:            lightgbm: 4.1.0
2023-11-13 14:39:31,162:INFO:               numba: 0.57.1
2023-11-13 14:39:31,162:INFO:            requests: 2.31.0
2023-11-13 14:39:31,162:INFO:          matplotlib: 3.6.0
2023-11-13 14:39:31,162:INFO:          scikitplot: 0.3.7
2023-11-13 14:39:31,162:INFO:         yellowbrick: 1.5
2023-11-13 14:39:31,162:INFO:              plotly: 5.9.0
2023-11-13 14:39:31,162:INFO:    plotly-resampler: Not installed
2023-11-13 14:39:31,162:INFO:             kaleido: 0.2.1
2023-11-13 14:39:31,162:INFO:           schemdraw: 0.15
2023-11-13 14:39:31,162:INFO:         statsmodels: 0.14.0
2023-11-13 14:39:31,162:INFO:              sktime: 0.21.1
2023-11-13 14:39:31,162:INFO:               tbats: 1.1.3
2023-11-13 14:39:31,162:INFO:            pmdarima: 2.0.4
2023-11-13 14:39:31,162:INFO:              psutil: 5.9.0
2023-11-13 14:39:31,163:INFO:          markupsafe: 2.1.1
2023-11-13 14:39:31,163:INFO:             pickle5: Not installed
2023-11-13 14:39:31,163:INFO:         cloudpickle: 2.2.1
2023-11-13 14:39:31,163:INFO:         deprecation: 2.1.0
2023-11-13 14:39:31,163:INFO:              xxhash: 2.0.2
2023-11-13 14:39:31,163:INFO:           wurlitzer: Not installed
2023-11-13 14:39:31,163:INFO:PyCaret optional dependencies:
2023-11-13 14:39:31,163:INFO:                shap: Not installed
2023-11-13 14:39:31,163:INFO:           interpret: Not installed
2023-11-13 14:39:31,163:INFO:                umap: Not installed
2023-11-13 14:39:31,163:INFO:     ydata_profiling: Not installed
2023-11-13 14:39:31,163:INFO:  explainerdashboard: Not installed
2023-11-13 14:39:31,163:INFO:             autoviz: Not installed
2023-11-13 14:39:31,163:INFO:           fairlearn: Not installed
2023-11-13 14:39:31,164:INFO:          deepchecks: Not installed
2023-11-13 14:39:31,164:INFO:             xgboost: 2.0.2
2023-11-13 14:39:31,164:INFO:            catboost: Not installed
2023-11-13 14:39:31,164:INFO:              kmodes: Not installed
2023-11-13 14:39:31,164:INFO:             mlxtend: Not installed
2023-11-13 14:39:31,164:INFO:       statsforecast: Not installed
2023-11-13 14:39:31,164:INFO:        tune_sklearn: Not installed
2023-11-13 14:39:31,164:INFO:                 ray: Not installed
2023-11-13 14:39:31,164:INFO:            hyperopt: Not installed
2023-11-13 14:39:31,164:INFO:              optuna: Not installed
2023-11-13 14:39:31,164:INFO:               skopt: Not installed
2023-11-13 14:39:31,164:INFO:              mlflow: Not installed
2023-11-13 14:39:31,164:INFO:              gradio: Not installed
2023-11-13 14:39:31,164:INFO:             fastapi: Not installed
2023-11-13 14:39:31,164:INFO:             uvicorn: Not installed
2023-11-13 14:39:31,164:INFO:              m2cgen: Not installed
2023-11-13 14:39:31,165:INFO:           evidently: Not installed
2023-11-13 14:39:31,165:INFO:               fugue: Not installed
2023-11-13 14:39:31,165:INFO:           streamlit: Not installed
2023-11-13 14:39:31,165:INFO:             prophet: Not installed
2023-11-13 14:39:31,165:INFO:None
2023-11-13 14:39:31,165:INFO:Set up data.
2023-11-13 14:39:31,172:INFO:Set up folding strategy.
2023-11-13 14:39:31,172:INFO:Set up train/test split.
2023-11-13 14:39:31,178:INFO:Set up index.
2023-11-13 14:39:31,178:INFO:Assigning column types.
2023-11-13 14:39:31,183:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-11-13 14:39:31,237:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-13 14:39:31,238:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:39:31,275:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:31,278:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:31,336:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-13 14:39:31,337:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:39:31,376:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:31,380:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:31,381:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-11-13 14:39:31,441:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:39:31,472:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:31,476:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:31,526:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-13 14:39:31,557:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:31,561:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:31,562:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-11-13 14:39:31,649:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:31,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:31,745:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:31,748:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:31,750:INFO:Preparing preprocessing pipeline...
2023-11-13 14:39:31,751:INFO:Set up label encoding.
2023-11-13 14:39:31,751:INFO:Set up simple imputation.
2023-11-13 14:39:31,752:INFO:Set up column name cleaning.
2023-11-13 14:39:31,797:INFO:Finished creating preprocessing pipeline.
2023-11-13 14:39:31,804:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\parkg\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['삼진', '이닝', '타자', 'WAR', '출장',
                                             'WHIP', 'WPA', '안타', 'FIP', '홀드'],
                                    transformer=SimpleImputer(add_indicator=Fals...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-11-13 14:39:31,804:INFO:Creating final display dataframe.
2023-11-13 14:39:31,927:INFO:Setup _display_container:                     Description             Value
0                    Session id              3290
1                        Target             label
2                   Target type        Multiclass
3                Target mapping  1: 0, 2: 1, 3: 2
4           Original data shape        (1240, 11)
5        Transformed data shape        (1240, 11)
6   Transformed train set shape         (868, 11)
7    Transformed test set shape         (372, 11)
8              Numeric features                10
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              d0c7
2023-11-13 14:39:32,036:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:32,040:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:32,126:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-13 14:39:32,129:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-11-13 14:39:32,131:INFO:setup() successfully completed in 0.98s...............
2023-11-13 14:39:32,133:INFO:Initializing compare_models()
2023-11-13 14:39:32,133:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=10, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 10, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2023-11-13 14:39:32,133:INFO:Checking exceptions
2023-11-13 14:39:32,136:INFO:Preparing display monitor
2023-11-13 14:39:32,179:INFO:Initializing Logistic Regression
2023-11-13 14:39:32,179:INFO:Total runtime is 0.0 minutes
2023-11-13 14:39:32,185:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:32,186:INFO:Initializing create_model()
2023-11-13 14:39:32,186:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:32,186:INFO:Checking exceptions
2023-11-13 14:39:32,186:INFO:Importing libraries
2023-11-13 14:39:32,186:INFO:Copying training dataset
2023-11-13 14:39:32,196:INFO:Defining folds
2023-11-13 14:39:32,196:INFO:Declaring metric variables
2023-11-13 14:39:32,201:INFO:Importing untrained model
2023-11-13 14:39:32,205:INFO:Logistic Regression Imported successfully
2023-11-13 14:39:32,217:INFO:Starting cross validation
2023-11-13 14:39:32,219:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:32,631:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,644:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,650:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,653:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,665:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,666:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,681:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,681:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,682:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,684:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,686:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,687:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,689:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,690:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,698:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,699:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,699:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,701:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,703:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,704:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,708:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,708:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,717:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:32,721:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,722:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,723:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,731:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,732:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,733:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,734:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,734:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,735:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,736:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,736:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,738:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:32,743:INFO:Calculating mean and std
2023-11-13 14:39:32,743:INFO:Creating metrics dataframe
2023-11-13 14:39:32,746:INFO:Uploading results into container
2023-11-13 14:39:32,747:INFO:Uploading model into container now
2023-11-13 14:39:32,747:INFO:_master_model_container: 1
2023-11-13 14:39:32,748:INFO:_display_container: 2
2023-11-13 14:39:32,748:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3290, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-13 14:39:32,748:INFO:create_model() successfully completed......................................
2023-11-13 14:39:32,852:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:32,852:INFO:Creating metrics dataframe
2023-11-13 14:39:32,867:INFO:Initializing K Neighbors Classifier
2023-11-13 14:39:32,867:INFO:Total runtime is 0.01147180398305257 minutes
2023-11-13 14:39:32,873:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:32,874:INFO:Initializing create_model()
2023-11-13 14:39:32,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:32,874:INFO:Checking exceptions
2023-11-13 14:39:32,874:INFO:Importing libraries
2023-11-13 14:39:32,874:INFO:Copying training dataset
2023-11-13 14:39:32,879:INFO:Defining folds
2023-11-13 14:39:32,879:INFO:Declaring metric variables
2023-11-13 14:39:32,885:INFO:Importing untrained model
2023-11-13 14:39:32,890:INFO:K Neighbors Classifier Imported successfully
2023-11-13 14:39:32,903:INFO:Starting cross validation
2023-11-13 14:39:32,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:33,072:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,076:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,076:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,076:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,077:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,079:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,080:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,080:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,080:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,080:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,083:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,085:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,086:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,086:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,106:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,108:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,109:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,109:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,110:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,111:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,112:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,113:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,114:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,117:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,117:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,123:INFO:Calculating mean and std
2023-11-13 14:39:33,123:INFO:Creating metrics dataframe
2023-11-13 14:39:33,126:INFO:Uploading results into container
2023-11-13 14:39:33,127:INFO:Uploading model into container now
2023-11-13 14:39:33,128:INFO:_master_model_container: 2
2023-11-13 14:39:33,128:INFO:_display_container: 2
2023-11-13 14:39:33,128:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-11-13 14:39:33,128:INFO:create_model() successfully completed......................................
2023-11-13 14:39:33,236:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:33,236:INFO:Creating metrics dataframe
2023-11-13 14:39:33,252:INFO:Initializing Naive Bayes
2023-11-13 14:39:33,253:INFO:Total runtime is 0.017896799246470134 minutes
2023-11-13 14:39:33,260:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:33,261:INFO:Initializing create_model()
2023-11-13 14:39:33,261:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:33,261:INFO:Checking exceptions
2023-11-13 14:39:33,261:INFO:Importing libraries
2023-11-13 14:39:33,261:INFO:Copying training dataset
2023-11-13 14:39:33,269:INFO:Defining folds
2023-11-13 14:39:33,269:INFO:Declaring metric variables
2023-11-13 14:39:33,274:INFO:Importing untrained model
2023-11-13 14:39:33,283:INFO:Naive Bayes Imported successfully
2023-11-13 14:39:33,293:INFO:Starting cross validation
2023-11-13 14:39:33,295:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:33,352:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,352:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,354:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,356:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,356:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,359:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,359:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,361:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,363:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,378:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,378:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,380:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,385:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,388:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,401:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,403:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,407:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,407:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,407:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,410:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,410:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,411:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,413:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,413:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,415:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,417:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,419:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,419:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,421:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,423:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,428:INFO:Calculating mean and std
2023-11-13 14:39:33,429:INFO:Creating metrics dataframe
2023-11-13 14:39:33,434:INFO:Uploading results into container
2023-11-13 14:39:33,435:INFO:Uploading model into container now
2023-11-13 14:39:33,435:INFO:_master_model_container: 3
2023-11-13 14:39:33,435:INFO:_display_container: 2
2023-11-13 14:39:33,436:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-13 14:39:33,436:INFO:create_model() successfully completed......................................
2023-11-13 14:39:33,557:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:33,558:INFO:Creating metrics dataframe
2023-11-13 14:39:33,578:INFO:Initializing Decision Tree Classifier
2023-11-13 14:39:33,578:INFO:Total runtime is 0.02332528034845988 minutes
2023-11-13 14:39:33,584:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:33,585:INFO:Initializing create_model()
2023-11-13 14:39:33,585:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:33,586:INFO:Checking exceptions
2023-11-13 14:39:33,586:INFO:Importing libraries
2023-11-13 14:39:33,586:INFO:Copying training dataset
2023-11-13 14:39:33,593:INFO:Defining folds
2023-11-13 14:39:33,593:INFO:Declaring metric variables
2023-11-13 14:39:33,598:INFO:Importing untrained model
2023-11-13 14:39:33,604:INFO:Decision Tree Classifier Imported successfully
2023-11-13 14:39:33,612:INFO:Starting cross validation
2023-11-13 14:39:33,614:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:33,661:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,663:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,667:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,678:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,680:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,681:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,684:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,687:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,687:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,690:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,693:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,696:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,716:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,718:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,720:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,720:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,721:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,722:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,723:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,723:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,725:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,726:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,728:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,730:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,738:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,739:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,740:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,741:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,742:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,743:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:33,749:INFO:Calculating mean and std
2023-11-13 14:39:33,750:INFO:Creating metrics dataframe
2023-11-13 14:39:33,753:INFO:Uploading results into container
2023-11-13 14:39:33,754:INFO:Uploading model into container now
2023-11-13 14:39:33,755:INFO:_master_model_container: 4
2023-11-13 14:39:33,755:INFO:_display_container: 2
2023-11-13 14:39:33,755:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3290, splitter='best')
2023-11-13 14:39:33,756:INFO:create_model() successfully completed......................................
2023-11-13 14:39:33,863:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:33,863:INFO:Creating metrics dataframe
2023-11-13 14:39:33,882:INFO:Initializing SVM - Linear Kernel
2023-11-13 14:39:33,883:INFO:Total runtime is 0.028379595279693602 minutes
2023-11-13 14:39:33,889:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:33,889:INFO:Initializing create_model()
2023-11-13 14:39:33,890:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:33,890:INFO:Checking exceptions
2023-11-13 14:39:33,890:INFO:Importing libraries
2023-11-13 14:39:33,890:INFO:Copying training dataset
2023-11-13 14:39:33,897:INFO:Defining folds
2023-11-13 14:39:33,898:INFO:Declaring metric variables
2023-11-13 14:39:33,906:INFO:Importing untrained model
2023-11-13 14:39:33,912:INFO:SVM - Linear Kernel Imported successfully
2023-11-13 14:39:33,924:INFO:Starting cross validation
2023-11-13 14:39:33,927:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:34,042:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,044:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,049:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,052:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,053:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,054:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,055:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,056:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,056:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,057:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,058:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,058:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,061:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,063:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:34,064:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,065:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,075:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,081:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,081:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,083:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,085:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,086:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,088:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,088:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,089:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:34,090:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,091:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,092:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,094:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,097:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,099:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,101:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-13 14:39:34,102:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,102:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,104:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,104:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,106:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,110:INFO:Calculating mean and std
2023-11-13 14:39:34,111:INFO:Creating metrics dataframe
2023-11-13 14:39:34,115:INFO:Uploading results into container
2023-11-13 14:39:34,116:INFO:Uploading model into container now
2023-11-13 14:39:34,116:INFO:_master_model_container: 5
2023-11-13 14:39:34,117:INFO:_display_container: 2
2023-11-13 14:39:34,117:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3290, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-11-13 14:39:34,117:INFO:create_model() successfully completed......................................
2023-11-13 14:39:34,234:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:34,234:INFO:Creating metrics dataframe
2023-11-13 14:39:34,255:INFO:Initializing Ridge Classifier
2023-11-13 14:39:34,255:INFO:Total runtime is 0.034601322809855145 minutes
2023-11-13 14:39:34,262:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:34,263:INFO:Initializing create_model()
2023-11-13 14:39:34,263:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:34,263:INFO:Checking exceptions
2023-11-13 14:39:34,263:INFO:Importing libraries
2023-11-13 14:39:34,263:INFO:Copying training dataset
2023-11-13 14:39:34,272:INFO:Defining folds
2023-11-13 14:39:34,273:INFO:Declaring metric variables
2023-11-13 14:39:34,330:INFO:Importing untrained model
2023-11-13 14:39:34,337:INFO:Ridge Classifier Imported successfully
2023-11-13 14:39:34,351:INFO:Starting cross validation
2023-11-13 14:39:34,353:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:34,394:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,395:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,395:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,396:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,397:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,397:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,398:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,399:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,400:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,402:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,403:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,404:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,407:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,409:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,412:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,413:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,416:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,427:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,432:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,433:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,434:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,436:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,437:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,437:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,438:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,441:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,441:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,441:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,442:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,444:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,444:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,444:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,445:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,446:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,448:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,450:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\parkg\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-13 14:39:34,451:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,451:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,453:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,455:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:34,459:INFO:Calculating mean and std
2023-11-13 14:39:34,460:INFO:Creating metrics dataframe
2023-11-13 14:39:34,464:INFO:Uploading results into container
2023-11-13 14:39:34,465:INFO:Uploading model into container now
2023-11-13 14:39:34,465:INFO:_master_model_container: 6
2023-11-13 14:39:34,466:INFO:_display_container: 2
2023-11-13 14:39:34,466:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3290, solver='auto',
                tol=0.0001)
2023-11-13 14:39:34,466:INFO:create_model() successfully completed......................................
2023-11-13 14:39:34,573:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:34,574:INFO:Creating metrics dataframe
2023-11-13 14:39:34,595:INFO:Initializing Random Forest Classifier
2023-11-13 14:39:34,595:INFO:Total runtime is 0.04026330312093099 minutes
2023-11-13 14:39:34,602:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:34,602:INFO:Initializing create_model()
2023-11-13 14:39:34,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:34,603:INFO:Checking exceptions
2023-11-13 14:39:34,603:INFO:Importing libraries
2023-11-13 14:39:34,603:INFO:Copying training dataset
2023-11-13 14:39:34,610:INFO:Defining folds
2023-11-13 14:39:34,611:INFO:Declaring metric variables
2023-11-13 14:39:34,617:INFO:Importing untrained model
2023-11-13 14:39:34,626:INFO:Random Forest Classifier Imported successfully
2023-11-13 14:39:34,639:INFO:Starting cross validation
2023-11-13 14:39:34,642:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:35,162:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,165:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,166:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,166:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,167:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,169:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,171:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,172:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,172:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,173:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,175:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,175:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,176:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,177:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,177:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,181:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,185:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,315:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,317:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,319:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,375:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,377:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,379:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,385:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,388:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,390:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,395:INFO:Calculating mean and std
2023-11-13 14:39:35,396:INFO:Creating metrics dataframe
2023-11-13 14:39:35,401:INFO:Uploading results into container
2023-11-13 14:39:35,401:INFO:Uploading model into container now
2023-11-13 14:39:35,402:INFO:_master_model_container: 7
2023-11-13 14:39:35,402:INFO:_display_container: 2
2023-11-13 14:39:35,402:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3290, verbose=0, warm_start=False)
2023-11-13 14:39:35,402:INFO:create_model() successfully completed......................................
2023-11-13 14:39:35,556:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:35,557:INFO:Creating metrics dataframe
2023-11-13 14:39:35,579:INFO:Initializing Quadratic Discriminant Analysis
2023-11-13 14:39:35,580:INFO:Total runtime is 0.05668024222056071 minutes
2023-11-13 14:39:35,587:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:35,588:INFO:Initializing create_model()
2023-11-13 14:39:35,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:35,589:INFO:Checking exceptions
2023-11-13 14:39:35,589:INFO:Importing libraries
2023-11-13 14:39:35,589:INFO:Copying training dataset
2023-11-13 14:39:35,596:INFO:Defining folds
2023-11-13 14:39:35,597:INFO:Declaring metric variables
2023-11-13 14:39:35,606:INFO:Importing untrained model
2023-11-13 14:39:35,613:INFO:Quadratic Discriminant Analysis Imported successfully
2023-11-13 14:39:35,625:INFO:Starting cross validation
2023-11-13 14:39:35,628:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:35,700:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,703:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,707:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,712:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,716:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,716:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,718:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,719:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,720:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,727:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,732:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,736:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,737:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,751:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,755:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,756:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,759:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,759:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,760:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,762:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,762:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,763:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,763:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,764:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,765:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,766:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,770:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,770:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,774:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,777:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:35,782:INFO:Calculating mean and std
2023-11-13 14:39:35,784:INFO:Creating metrics dataframe
2023-11-13 14:39:35,789:INFO:Uploading results into container
2023-11-13 14:39:35,790:INFO:Uploading model into container now
2023-11-13 14:39:35,791:INFO:_master_model_container: 8
2023-11-13 14:39:35,791:INFO:_display_container: 2
2023-11-13 14:39:35,792:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-11-13 14:39:35,792:INFO:create_model() successfully completed......................................
2023-11-13 14:39:35,956:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:35,958:INFO:Creating metrics dataframe
2023-11-13 14:39:35,978:INFO:Initializing Ada Boost Classifier
2023-11-13 14:39:35,979:INFO:Total runtime is 0.06334344943364462 minutes
2023-11-13 14:39:35,989:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:35,991:INFO:Initializing create_model()
2023-11-13 14:39:35,991:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:35,991:INFO:Checking exceptions
2023-11-13 14:39:35,991:INFO:Importing libraries
2023-11-13 14:39:35,991:INFO:Copying training dataset
2023-11-13 14:39:35,999:INFO:Defining folds
2023-11-13 14:39:35,999:INFO:Declaring metric variables
2023-11-13 14:39:36,004:INFO:Importing untrained model
2023-11-13 14:39:36,009:INFO:Ada Boost Classifier Imported successfully
2023-11-13 14:39:36,018:INFO:Starting cross validation
2023-11-13 14:39:36,019:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:36,349:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,353:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,356:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,356:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,360:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,363:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,372:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,376:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,376:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,380:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,380:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,381:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,384:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,386:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,389:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,392:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,396:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,400:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,403:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,404:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,405:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,407:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,407:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,408:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,410:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,413:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,414:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,416:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,418:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:36,422:INFO:Calculating mean and std
2023-11-13 14:39:36,423:INFO:Creating metrics dataframe
2023-11-13 14:39:36,427:INFO:Uploading results into container
2023-11-13 14:39:36,428:INFO:Uploading model into container now
2023-11-13 14:39:36,429:INFO:_master_model_container: 9
2023-11-13 14:39:36,429:INFO:_display_container: 2
2023-11-13 14:39:36,429:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=3290)
2023-11-13 14:39:36,430:INFO:create_model() successfully completed......................................
2023-11-13 14:39:36,566:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:36,566:INFO:Creating metrics dataframe
2023-11-13 14:39:36,593:INFO:Initializing Gradient Boosting Classifier
2023-11-13 14:39:36,594:INFO:Total runtime is 0.07359426021575928 minutes
2023-11-13 14:39:36,600:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:36,601:INFO:Initializing create_model()
2023-11-13 14:39:36,602:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:36,602:INFO:Checking exceptions
2023-11-13 14:39:36,602:INFO:Importing libraries
2023-11-13 14:39:36,602:INFO:Copying training dataset
2023-11-13 14:39:36,613:INFO:Defining folds
2023-11-13 14:39:36,613:INFO:Declaring metric variables
2023-11-13 14:39:36,620:INFO:Importing untrained model
2023-11-13 14:39:36,628:INFO:Gradient Boosting Classifier Imported successfully
2023-11-13 14:39:36,643:INFO:Starting cross validation
2023-11-13 14:39:36,645:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:38,105:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,108:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,112:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,119:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,123:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,126:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,134:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,136:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,139:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,159:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,163:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,164:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,166:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,167:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,168:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,171:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,176:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,177:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,179:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,180:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,181:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,182:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,183:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,184:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,185:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,207:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,209:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,211:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,216:INFO:Calculating mean and std
2023-11-13 14:39:38,217:INFO:Creating metrics dataframe
2023-11-13 14:39:38,220:INFO:Uploading results into container
2023-11-13 14:39:38,221:INFO:Uploading model into container now
2023-11-13 14:39:38,222:INFO:_master_model_container: 10
2023-11-13 14:39:38,222:INFO:_display_container: 2
2023-11-13 14:39:38,223:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3290, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-13 14:39:38,223:INFO:create_model() successfully completed......................................
2023-11-13 14:39:38,328:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:38,328:INFO:Creating metrics dataframe
2023-11-13 14:39:38,344:INFO:Initializing Linear Discriminant Analysis
2023-11-13 14:39:38,344:INFO:Total runtime is 0.10274550914764405 minutes
2023-11-13 14:39:38,348:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:38,350:INFO:Initializing create_model()
2023-11-13 14:39:38,350:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:38,350:INFO:Checking exceptions
2023-11-13 14:39:38,350:INFO:Importing libraries
2023-11-13 14:39:38,350:INFO:Copying training dataset
2023-11-13 14:39:38,354:INFO:Defining folds
2023-11-13 14:39:38,355:INFO:Declaring metric variables
2023-11-13 14:39:38,360:INFO:Importing untrained model
2023-11-13 14:39:38,367:INFO:Linear Discriminant Analysis Imported successfully
2023-11-13 14:39:38,377:INFO:Starting cross validation
2023-11-13 14:39:38,379:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:38,434:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,435:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,437:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,440:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,441:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,443:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,443:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,444:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,445:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,445:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,446:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,447:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,447:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,449:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,450:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,450:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,453:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,456:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,457:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,458:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,460:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,460:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,462:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,465:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,471:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,473:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,476:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,478:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,480:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,482:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:38,486:INFO:Calculating mean and std
2023-11-13 14:39:38,488:INFO:Creating metrics dataframe
2023-11-13 14:39:38,492:INFO:Uploading results into container
2023-11-13 14:39:38,492:INFO:Uploading model into container now
2023-11-13 14:39:38,493:INFO:_master_model_container: 11
2023-11-13 14:39:38,493:INFO:_display_container: 2
2023-11-13 14:39:38,494:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-11-13 14:39:38,494:INFO:create_model() successfully completed......................................
2023-11-13 14:39:38,621:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:38,621:INFO:Creating metrics dataframe
2023-11-13 14:39:38,646:INFO:Initializing Extra Trees Classifier
2023-11-13 14:39:38,647:INFO:Total runtime is 0.10780969858169556 minutes
2023-11-13 14:39:38,655:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:38,657:INFO:Initializing create_model()
2023-11-13 14:39:38,657:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:38,657:INFO:Checking exceptions
2023-11-13 14:39:38,657:INFO:Importing libraries
2023-11-13 14:39:38,658:INFO:Copying training dataset
2023-11-13 14:39:38,666:INFO:Defining folds
2023-11-13 14:39:38,666:INFO:Declaring metric variables
2023-11-13 14:39:38,673:INFO:Importing untrained model
2023-11-13 14:39:38,683:INFO:Extra Trees Classifier Imported successfully
2023-11-13 14:39:38,694:INFO:Starting cross validation
2023-11-13 14:39:38,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:39,181:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,182:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,183:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,185:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,186:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,188:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,188:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,188:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,188:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,189:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,191:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,192:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,195:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,199:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,202:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,205:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,211:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,214:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,216:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,261:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,263:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,265:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,327:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,329:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,332:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,346:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,349:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,352:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:39,358:INFO:Calculating mean and std
2023-11-13 14:39:39,360:INFO:Creating metrics dataframe
2023-11-13 14:39:39,363:INFO:Uploading results into container
2023-11-13 14:39:39,364:INFO:Uploading model into container now
2023-11-13 14:39:39,365:INFO:_master_model_container: 12
2023-11-13 14:39:39,365:INFO:_display_container: 2
2023-11-13 14:39:39,366:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3290, verbose=0, warm_start=False)
2023-11-13 14:39:39,366:INFO:create_model() successfully completed......................................
2023-11-13 14:39:39,504:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:39,504:INFO:Creating metrics dataframe
2023-11-13 14:39:39,541:INFO:Initializing Extreme Gradient Boosting
2023-11-13 14:39:39,542:INFO:Total runtime is 0.1226968288421631 minutes
2023-11-13 14:39:39,551:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:39,552:INFO:Initializing create_model()
2023-11-13 14:39:39,553:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:39,553:INFO:Checking exceptions
2023-11-13 14:39:39,553:INFO:Importing libraries
2023-11-13 14:39:39,554:INFO:Copying training dataset
2023-11-13 14:39:39,563:INFO:Defining folds
2023-11-13 14:39:39,563:INFO:Declaring metric variables
2023-11-13 14:39:39,574:INFO:Importing untrained model
2023-11-13 14:39:39,582:INFO:Extreme Gradient Boosting Imported successfully
2023-11-13 14:39:39,595:INFO:Starting cross validation
2023-11-13 14:39:39,597:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:40,011:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,015:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,018:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,023:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,027:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,030:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,049:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,051:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:40,055:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,390:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,393:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,396:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,399:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,403:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,406:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,421:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,424:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,427:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,427:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,430:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,433:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,434:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,437:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,440:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,448:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,451:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,454:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,464:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,467:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,469:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:41,475:INFO:Calculating mean and std
2023-11-13 14:39:41,478:INFO:Creating metrics dataframe
2023-11-13 14:39:41,485:INFO:Uploading results into container
2023-11-13 14:39:41,487:INFO:Uploading model into container now
2023-11-13 14:39:41,487:INFO:_master_model_container: 13
2023-11-13 14:39:41,488:INFO:_display_container: 2
2023-11-13 14:39:41,489:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2023-11-13 14:39:41,490:INFO:create_model() successfully completed......................................
2023-11-13 14:39:41,622:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:41,623:INFO:Creating metrics dataframe
2023-11-13 14:39:41,646:INFO:Initializing Light Gradient Boosting Machine
2023-11-13 14:39:41,646:INFO:Total runtime is 0.15779380798339845 minutes
2023-11-13 14:39:41,652:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:41,652:INFO:Initializing create_model()
2023-11-13 14:39:41,652:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:41,653:INFO:Checking exceptions
2023-11-13 14:39:41,653:INFO:Importing libraries
2023-11-13 14:39:41,653:INFO:Copying training dataset
2023-11-13 14:39:41,661:INFO:Defining folds
2023-11-13 14:39:41,661:INFO:Declaring metric variables
2023-11-13 14:39:41,669:INFO:Importing untrained model
2023-11-13 14:39:41,676:INFO:Light Gradient Boosting Machine Imported successfully
2023-11-13 14:39:41,687:INFO:Starting cross validation
2023-11-13 14:39:41,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:47,550:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,558:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,561:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,577:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,580:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,580:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,583:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,583:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,596:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,599:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,602:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,605:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,608:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,611:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,675:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,678:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,682:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,695:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,698:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,703:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,706:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,717:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,720:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,742:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,745:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,747:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,762:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,765:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,767:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:47,773:INFO:Calculating mean and std
2023-11-13 14:39:47,776:INFO:Creating metrics dataframe
2023-11-13 14:39:47,782:INFO:Uploading results into container
2023-11-13 14:39:47,783:INFO:Uploading model into container now
2023-11-13 14:39:47,784:INFO:_master_model_container: 14
2023-11-13 14:39:47,785:INFO:_display_container: 2
2023-11-13 14:39:47,786:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3290, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-11-13 14:39:47,786:INFO:create_model() successfully completed......................................
2023-11-13 14:39:47,926:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:47,926:INFO:Creating metrics dataframe
2023-11-13 14:39:47,950:INFO:Initializing Dummy Classifier
2023-11-13 14:39:47,950:INFO:Total runtime is 0.26285521189371747 minutes
2023-11-13 14:39:47,956:INFO:SubProcess create_model() called ==================================
2023-11-13 14:39:47,957:INFO:Initializing create_model()
2023-11-13 14:39:47,957:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DF68EEEF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:47,957:INFO:Checking exceptions
2023-11-13 14:39:47,957:INFO:Importing libraries
2023-11-13 14:39:47,957:INFO:Copying training dataset
2023-11-13 14:39:47,963:INFO:Defining folds
2023-11-13 14:39:47,964:INFO:Declaring metric variables
2023-11-13 14:39:47,970:INFO:Importing untrained model
2023-11-13 14:39:47,975:INFO:Dummy Classifier Imported successfully
2023-11-13 14:39:47,988:INFO:Starting cross validation
2023-11-13 14:39:47,990:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-13 14:39:48,042:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,046:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,050:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,051:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,053:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,053:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,054:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,055:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,056:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,056:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,045:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,058:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,061:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,064:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,066:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,070:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,073:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,075:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,075:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,076:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,077:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,077:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,078:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,082:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,084:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,085:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,086:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,086:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,088:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,088:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,094:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,095:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,096:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,097:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,098:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,098:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-13 14:39:48,099:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,099:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-13 14:39:48,104:INFO:Calculating mean and std
2023-11-13 14:39:48,105:INFO:Creating metrics dataframe
2023-11-13 14:39:48,109:INFO:Uploading results into container
2023-11-13 14:39:48,110:INFO:Uploading model into container now
2023-11-13 14:39:48,110:INFO:_master_model_container: 15
2023-11-13 14:39:48,110:INFO:_display_container: 2
2023-11-13 14:39:48,110:INFO:DummyClassifier(constant=None, random_state=3290, strategy='prior')
2023-11-13 14:39:48,110:INFO:create_model() successfully completed......................................
2023-11-13 14:39:48,219:INFO:SubProcess create_model() end ==================================
2023-11-13 14:39:48,219:INFO:Creating metrics dataframe
2023-11-13 14:39:48,271:INFO:Initializing create_model()
2023-11-13 14:39:48,272:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3290, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:48,272:INFO:Checking exceptions
2023-11-13 14:39:48,275:INFO:Importing libraries
2023-11-13 14:39:48,275:INFO:Copying training dataset
2023-11-13 14:39:48,279:INFO:Defining folds
2023-11-13 14:39:48,279:INFO:Declaring metric variables
2023-11-13 14:39:48,279:INFO:Importing untrained model
2023-11-13 14:39:48,280:INFO:Declaring custom model
2023-11-13 14:39:48,280:INFO:Extra Trees Classifier Imported successfully
2023-11-13 14:39:48,281:INFO:Cross validation set to False
2023-11-13 14:39:48,281:INFO:Fitting Model
2023-11-13 14:39:48,486:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3290, verbose=0, warm_start=False)
2023-11-13 14:39:48,486:INFO:create_model() successfully completed......................................
2023-11-13 14:39:48,608:INFO:Initializing create_model()
2023-11-13 14:39:48,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3290, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:48,609:INFO:Checking exceptions
2023-11-13 14:39:48,613:INFO:Importing libraries
2023-11-13 14:39:48,614:INFO:Copying training dataset
2023-11-13 14:39:48,622:INFO:Defining folds
2023-11-13 14:39:48,623:INFO:Declaring metric variables
2023-11-13 14:39:48,623:INFO:Importing untrained model
2023-11-13 14:39:48,623:INFO:Declaring custom model
2023-11-13 14:39:48,624:INFO:Random Forest Classifier Imported successfully
2023-11-13 14:39:48,625:INFO:Cross validation set to False
2023-11-13 14:39:48,626:INFO:Fitting Model
2023-11-13 14:39:48,933:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3290, verbose=0, warm_start=False)
2023-11-13 14:39:48,933:INFO:create_model() successfully completed......................................
2023-11-13 14:39:49,044:INFO:Initializing create_model()
2023-11-13 14:39:49,045:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3290, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:49,045:INFO:Checking exceptions
2023-11-13 14:39:49,049:INFO:Importing libraries
2023-11-13 14:39:49,050:INFO:Copying training dataset
2023-11-13 14:39:49,060:INFO:Defining folds
2023-11-13 14:39:49,060:INFO:Declaring metric variables
2023-11-13 14:39:49,060:INFO:Importing untrained model
2023-11-13 14:39:49,061:INFO:Declaring custom model
2023-11-13 14:39:49,062:INFO:Light Gradient Boosting Machine Imported successfully
2023-11-13 14:39:49,063:INFO:Cross validation set to False
2023-11-13 14:39:49,073:INFO:Fitting Model
2023-11-13 14:39:49,093:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000613 seconds.
2023-11-13 14:39:49,094:INFO:You can set `force_col_wise=true` to remove the overhead.
2023-11-13 14:39:49,094:INFO:[LightGBM] [Info] Total Bins 1728
2023-11-13 14:39:49,094:INFO:[LightGBM] [Info] Number of data points in the train set: 868, number of used features: 10
2023-11-13 14:39:49,094:INFO:[LightGBM] [Info] Start training from score -0.686259
2023-11-13 14:39:49,094:INFO:[LightGBM] [Info] Start training from score -1.345657
2023-11-13 14:39:49,094:INFO:[LightGBM] [Info] Start training from score -1.443182
2023-11-13 14:39:49,099:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2023-11-13 14:39:49,102:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2023-11-13 14:39:49,624:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3290, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-11-13 14:39:49,624:INFO:create_model() successfully completed......................................
2023-11-13 14:39:49,738:INFO:Initializing create_model()
2023-11-13 14:39:49,738:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3290, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:49,739:INFO:Checking exceptions
2023-11-13 14:39:49,740:INFO:Importing libraries
2023-11-13 14:39:49,741:INFO:Copying training dataset
2023-11-13 14:39:49,744:INFO:Defining folds
2023-11-13 14:39:49,744:INFO:Declaring metric variables
2023-11-13 14:39:49,744:INFO:Importing untrained model
2023-11-13 14:39:49,745:INFO:Declaring custom model
2023-11-13 14:39:49,745:INFO:Logistic Regression Imported successfully
2023-11-13 14:39:49,746:INFO:Cross validation set to False
2023-11-13 14:39:49,746:INFO:Fitting Model
2023-11-13 14:39:49,976:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-13 14:39:49,977:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3290, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-13 14:39:49,977:INFO:create_model() successfully completed......................................
2023-11-13 14:39:50,114:INFO:Initializing create_model()
2023-11-13 14:39:50,115:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3290, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:50,115:INFO:Checking exceptions
2023-11-13 14:39:50,120:INFO:Importing libraries
2023-11-13 14:39:50,120:INFO:Copying training dataset
2023-11-13 14:39:50,129:INFO:Defining folds
2023-11-13 14:39:50,129:INFO:Declaring metric variables
2023-11-13 14:39:50,129:INFO:Importing untrained model
2023-11-13 14:39:50,129:INFO:Declaring custom model
2023-11-13 14:39:50,130:INFO:Ridge Classifier Imported successfully
2023-11-13 14:39:50,131:INFO:Cross validation set to False
2023-11-13 14:39:50,132:INFO:Fitting Model
2023-11-13 14:39:50,154:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3290, solver='auto',
                tol=0.0001)
2023-11-13 14:39:50,154:INFO:create_model() successfully completed......................................
2023-11-13 14:39:50,312:INFO:Initializing create_model()
2023-11-13 14:39:50,313:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:50,313:INFO:Checking exceptions
2023-11-13 14:39:50,319:INFO:Importing libraries
2023-11-13 14:39:50,319:INFO:Copying training dataset
2023-11-13 14:39:50,324:INFO:Defining folds
2023-11-13 14:39:50,325:INFO:Declaring metric variables
2023-11-13 14:39:50,325:INFO:Importing untrained model
2023-11-13 14:39:50,325:INFO:Declaring custom model
2023-11-13 14:39:50,329:INFO:Extreme Gradient Boosting Imported successfully
2023-11-13 14:39:50,331:INFO:Cross validation set to False
2023-11-13 14:39:50,331:INFO:Fitting Model
2023-11-13 14:39:50,812:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='multi:softprob', ...)
2023-11-13 14:39:50,813:INFO:create_model() successfully completed......................................
2023-11-13 14:39:50,958:INFO:Initializing create_model()
2023-11-13 14:39:50,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3290, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:50,959:INFO:Checking exceptions
2023-11-13 14:39:50,961:INFO:Importing libraries
2023-11-13 14:39:50,961:INFO:Copying training dataset
2023-11-13 14:39:50,965:INFO:Defining folds
2023-11-13 14:39:50,965:INFO:Declaring metric variables
2023-11-13 14:39:50,965:INFO:Importing untrained model
2023-11-13 14:39:50,965:INFO:Declaring custom model
2023-11-13 14:39:50,966:INFO:Gradient Boosting Classifier Imported successfully
2023-11-13 14:39:50,967:INFO:Cross validation set to False
2023-11-13 14:39:50,967:INFO:Fitting Model
2023-11-13 14:39:52,390:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3290, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-13 14:39:52,391:INFO:create_model() successfully completed......................................
2023-11-13 14:39:52,532:INFO:Initializing create_model()
2023-11-13 14:39:52,533:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:52,533:INFO:Checking exceptions
2023-11-13 14:39:52,537:INFO:Importing libraries
2023-11-13 14:39:52,537:INFO:Copying training dataset
2023-11-13 14:39:52,545:INFO:Defining folds
2023-11-13 14:39:52,545:INFO:Declaring metric variables
2023-11-13 14:39:52,545:INFO:Importing untrained model
2023-11-13 14:39:52,546:INFO:Declaring custom model
2023-11-13 14:39:52,546:INFO:Linear Discriminant Analysis Imported successfully
2023-11-13 14:39:52,547:INFO:Cross validation set to False
2023-11-13 14:39:52,547:INFO:Fitting Model
2023-11-13 14:39:52,570:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-11-13 14:39:52,571:INFO:create_model() successfully completed......................................
2023-11-13 14:39:52,711:INFO:Initializing create_model()
2023-11-13 14:39:52,712:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:52,712:INFO:Checking exceptions
2023-11-13 14:39:52,716:INFO:Importing libraries
2023-11-13 14:39:52,716:INFO:Copying training dataset
2023-11-13 14:39:52,725:INFO:Defining folds
2023-11-13 14:39:52,725:INFO:Declaring metric variables
2023-11-13 14:39:52,725:INFO:Importing untrained model
2023-11-13 14:39:52,725:INFO:Declaring custom model
2023-11-13 14:39:52,726:INFO:Naive Bayes Imported successfully
2023-11-13 14:39:52,727:INFO:Cross validation set to False
2023-11-13 14:39:52,727:INFO:Fitting Model
2023-11-13 14:39:52,745:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-13 14:39:52,745:INFO:create_model() successfully completed......................................
2023-11-13 14:39:52,897:INFO:Initializing create_model()
2023-11-13 14:39:52,897:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DF65AFDC10>, estimator=QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-13 14:39:52,897:INFO:Checking exceptions
2023-11-13 14:39:52,899:INFO:Importing libraries
2023-11-13 14:39:52,900:INFO:Copying training dataset
2023-11-13 14:39:52,909:INFO:Defining folds
2023-11-13 14:39:52,909:INFO:Declaring metric variables
2023-11-13 14:39:52,909:INFO:Importing untrained model
2023-11-13 14:39:52,909:INFO:Declaring custom model
2023-11-13 14:39:52,910:INFO:Quadratic Discriminant Analysis Imported successfully
2023-11-13 14:39:52,911:INFO:Cross validation set to False
2023-11-13 14:39:52,911:INFO:Fitting Model
2023-11-13 14:39:52,931:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-11-13 14:39:52,931:INFO:create_model() successfully completed......................................
2023-11-13 14:39:53,117:INFO:_master_model_container: 15
2023-11-13 14:39:53,118:INFO:_display_container: 2
2023-11-13 14:39:53,122:INFO:[ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3290, verbose=0, warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3290, verbose=0, warm_start=False), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3290, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3290, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3290, solver='auto',
                tol=0.0001), XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='multi:softprob', ...), GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3290, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), GaussianNB(priors=None, var_smoothing=1e-09), QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)]
2023-11-13 14:39:53,123:INFO:compare_models() successfully completed......................................
2023-11-13 14:43:26,545:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:43:26,876:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:43:30,218:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:43:30,633:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:10,012:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:10,368:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:13,202:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:13,593:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:52,687:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:53,006:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:55,880:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

2023-11-13 14:45:56,173:WARNING:c:\Users\parkg\anaconda3\Lib\site-packages\IPython\core\pylabtools.py:152: UserWarning: Glyph 8722 (\N{MINUS SIGN}) missing from current font.
  fig.canvas.print_figure(bytes_io, **kw)

